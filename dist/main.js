/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/character */ \"./src/scripts/character.js\");\n/* harmony import */ var _scripts_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sprite */ \"./src/scripts/sprite.js\");\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.querySelector('canvas');\n  const context = canvas.getContext('2d'); // c is context\n\n  canvas.width = 1024;\n  canvas.height = 576;\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  // creatae a new player\n\n  const player = new _scripts_character__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, context, {\n    // creating the position and velocity as a key: value pair\n    position: {\n      x: 0,\n      y: 150 // so that we start at the bottom of the frame\n    },\n\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: 'green',\n    offset: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/Knight/Sprites/Idle.png',\n    framesMax: 11,\n    scale: 2.5,\n    offset: {\n      x: 160,\n      y: 140\n    },\n    sprites: {\n      idle: {\n        imageSrc: 'assets/Knight/Sprites/Idle.png',\n        framesMax: 11\n      },\n      run: {\n        imageSrc: 'assets/Knight/Sprites/Run.png',\n        framesMax: 8,\n        image: new Image()\n      },\n      jump: {\n        imageSrc: 'assets/Knight/Sprites/Jump.png',\n        framesMax: 3\n      },\n      attack1: {\n        imageSrc: 'assets/Knight/Sprites/Attack1.png',\n        framesMax: 3\n      }\n    }\n  });\n  console.log(player);\n  const enemy = new _scripts_character__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, context, {\n    position: {\n      x: 400,\n      y: 100\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: 'blue',\n    offset: {\n      x: -50,\n      y: 0\n    },\n    imageSrc: 'assets/Knight/Sprites/Idle.png'\n  });\n  const background = new _scripts_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](canvas, context, {\n    position: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/game_background_3/background.png'\n  });\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    w: {\n      pressed: false\n    }\n  };\n  function attackCollision(player1, player2) {\n    return player1.attackRect.position.x + player1.attackRect.width >= player2.position.x && player1.attackRect.position.x <= player2.position.x + player2.width && player1.attackRect.position.y + player1.attackRect.height >= player2.position.y && player1.attackRect.position.y <= player2.position.y + player2.height;\n  }\n  function endgameFunc(_ref) {\n    let {\n      player,\n      enemy,\n      timerId\n    } = _ref;\n    clearTimeout(timerId);\n    document.querySelector('#textresult').style.display = 'flex';\n    if (player.health === enemy.health) {\n      document.querySelector('#textresult').innerHTML = 'Tie';\n      document.querySelector('#textresult').style.display = 'flex';\n    } else if (player.health > enemy.health) {\n      document.querySelector('#textresult').innerHTML = 'PLAYER 1 WINS';\n      document.querySelector('#textresult').style.display = 'flex';\n    } else if (enemy.health > player.health) {\n      document.querySelector('#textresult').innerHTML = 'PLAYER 2 WINS';\n      document.querySelector('#textresult').style.display = 'flex';\n    }\n  }\n  let timer = 45;\n  let timerId;\n  function countdown() {\n    if (timer > 0) {\n      timerId = setTimeout(countdown, 1000); // set interval allows multiple execution of code in set interval; setTimeout allows one execution\n      timer--;\n      document.querySelector(\"#timer\").innerHTML = timer;\n    }\n    if (timer === 0) {\n      document.querySelector('#textresult').style.display = 'flex';\n      endgameFunc({\n        player,\n        enemy\n      });\n    }\n  }\n  countdown();\n  function movement() {\n    context.fillStyle = \"black\"; // this is done so that when we call movement the color of the canvas doesn't turn red bcs of \n    // this.context.fillStyle = \"red\" in draw() method\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    window.requestAnimationFrame(movement); // this calls movement function on an endless loop\n    background.update();\n    player.update();\n    enemy.update();\n    player.velocity.x = 0;\n    player.image = player.sprites.idle.image;\n    if (keys.a.pressed) {\n      player.velocity.x = -5;\n      player.image = player.sprites.run.image;\n    } else if (keys.d.pressed) {\n      player.velocity.x = 5;\n      player.image = player.sprites.run.image;\n    } else if (keys.w.pressed) {\n      // if(player.position.y > 0){\n      player.velocity.y = -10;\n      player.image = player.sprites.jump.image;\n      // }\n    }\n\n    // if(player.velocity.y < 0){\n    //     player.image = player.sprites.jump.image\n    //     // player.framesMax = player.sprites.jump.framesMax\n    // }\n\n    //collision detection\n    if (attackCollision(player, enemy) && player.attacking) {\n      player.attacking = false;\n      enemy.health -= 5;\n      document.querySelector('#enemyHealth').style.width = enemy.health + '%';\n    }\n    if (attackCollision(enemy, player) && enemy.attacking) {\n      enemy.attacking = false;\n      player.health -= 5; //**************** */\n      document.querySelector('#playerHealth').style.width = player.health + '%';\n    }\n\n    // end game logic\n    if (enemy.health <= 0 || player.health <= 0) {\n      endgameFunc({\n        player,\n        enemy,\n        timerId\n      });\n    }\n  }\n  movement();\n  window.addEventListener('keydown', event => {\n    //keydown is a key that allows for recognition of keyboard inputs on the console\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = true; // when i press d movement function picks it up bcs it is running \n        // every unit of time. \n        break;\n      case 'a':\n        keys.a.pressed = true;\n        break;\n      case 'w':\n        keys.w.pressed = true;\n        break;\n      case 'k':\n        player.attack();\n        break;\n    }\n    console.log(event.key);\n  });\n  window.addEventListener('keyup', event => {\n    //keydown is a key that allows for recognition of keyboard inputs on the console\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = false; // when i release d, movement functuin picks it up bcs it's running\n        // every unit of time\n        break;\n      case 'a':\n        keys.a.pressed = false;\n        break;\n      case 'w':\n        keys.w.pressed = false;\n        console.log(\"released\", event.key);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/character.js":
/*!**********************************!*\
  !*** ./src/scripts/character.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Character; }\n/* harmony export */ });\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite */ \"./src/scripts/sprite.js\");\n\nconst gravity = 0.7;\nclass Character extends _sprite__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  // add canvas and context as arguments for constructor as they were created in a different class file//\n\n  constructor(canvas, context, _ref) {\n    let {\n      position,\n      velocity,\n      color,\n      // offset, \n      imageSrc,\n      scale = 1,\n      framesMax = 1,\n      offset = {\n        x: 0,\n        y: 0\n      },\n      sprites\n    } = _ref;\n    super(canvas, context, {\n      position,\n      imageSrc,\n      scale,\n      framesMax,\n      offset\n    });\n    this.canvas = canvas; // creating the frame\n    this.context = context; // this is where we attatch our programatic logic\n    // this.position = position;  // position of character. Contains x, y\n    this.velocity = velocity; // velocity of character. Contains x, y. Only use is to be added to position(change position)\n    this.color = color;\n    this.width = 50; // width of my character box. Incrases widht towards right\n    this.height = 150; /// height of my character box. Increases height towards bottom\n\n    this.attackRect = {\n      position: {\n        x: this.position.x,\n        y: this.position.y\n      },\n      offset,\n      width: 100,\n      height: 50\n    };\n    this.attacking;\n    this.health = 100;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 15; //////////////////////\n    this.framesMax = framesMax;\n    this.sprites = sprites;\n    for (const sprite in this.sprites) {\n      sprites[sprite].image = new Image();\n      sprites[sprite].image.src = sprites[sprite].imageSrc;\n    }\n  }\n  update() {\n    // this is not the update for the entire fram. this just updates the specific character.\n    // update gets called every unit of timein movement();\n    this.draw();\n    this.framesElapsed++;\n    if (this.framesElapsed % this.framesHold === 0) {\n      if (this.framesCurrent < this.framesMax - 1) {\n        this.framesCurrent++;\n      } else {\n        this.framesCurrent = 0;\n      }\n    }\n    this.attackRect.position.x = this.position.x + this.attackRect.offset.x;\n    this.attackRect.position.y = this.position.y;\n    this.position.x += this.velocity.x;\n    // if character position becomes < 0, this means it's in the ceiling. stop code from reducing the value \n    //of y anymore\n    if (this.position.y < 0) {\n      this.velocity.y = gravity; // gravity is what brings it back down from the ceiling\n    }\n\n    this.position.y += this.velocity.y;\n    if (this.position.y + this.height + this.velocity.y >= this.canvas.height) {\n      this.velocity.y = 0; //stopping movement when the user chareacter is >= canvas height(boundary wall)\n    } else {\n      this.velocity.y += gravity; // adding gravity prevents the characters from leaving the screen\n    }\n  }\n\n  attack() {\n    this.attacking = true;\n    setInterval(() => {\n      this.attacking = false;\n    }, 1000);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/character.js\n");

/***/ }),

/***/ "./src/scripts/sprite.js":
/*!*******************************!*\
  !*** ./src/scripts/sprite.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Sprite; }\n/* harmony export */ });\nclass Sprite {\n  constructor(canvas, context, _ref) {\n    let {\n      position,\n      imageSrc,\n      scale = 1,\n      framesMax = 1,\n      offset = {\n        x: 0,\n        y: 0\n      }\n    } = _ref;\n    this.canvas = canvas; // creating the frame\n    this.context = context; // this is where we attatch our programatic logic\n    this.position = position; // position of character. Contains x, y\n    this.image = new Image();\n    this.image.src = imageSrc;\n    this.scale = scale;\n    this.framesMax = framesMax;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 15;\n    this.offset = offset;\n    this.width = 50; // width of my character box. Incrases widht towards right\n    this.height = 150; /// height of my character box. Increases height towards bottom\n  }\n\n  draw() {\n    this.context.drawImage(this.image, this.framesCurrent * (this.image.width / this.framesMax), 0, this.image.width / this.framesMax, this.image.height, this.position.x - this.offset.x, this.position.y - this.offset.y, this.image.width / this.framesMax * this.scale, this.image.height * this.scale);\n  }\n  update() {\n    this.draw();\n    this.framesElapsed++;\n    if (this.framesElapsed % this.framesHold === 0) {\n      if (this.framesCurrent < this.framesMax - 1) {\n        this.framesCurrent++;\n      } else {\n        this.framesCurrent = 0;\n      }\n    }\n  }\n}\n\n//starting player sprite\n\n//The update() method is responsible for updating the state of the sprite and drawing it on the canvas.\n\n//The first thing that the method does is call the draw() method, which draws the current frame of the sprite on the canvas.\n\n//After drawing the sprite, the method updates the number of frames that \n//have elapsed since the last frame change, by incrementing the framesElapsed property.\n\n//Then, it checks whether the framesElapsed property is a multiple of the framesHold property. \n//If it is, it means that it's time to change to the next frame.\n// The framesHold property determines how many frames should be displayed before switching to the next frame in the sprite animation.\n\n//The method checks if the framesCurrent property is less than framesMax - 1, \n//which means that there are more frames to show. If there are, the method increments the framesCurrent property by 1 to move to the next frame.\n\n//If the framesCurrent property is already equal to framesMax - 1, \n//it means that the sprite has reached the last frame. In this case, the method sets the framesCurrent property \n//back to 0 to start the animation over again.\n\n//Overall, the update() method updates the state of the sprite, including its frame animation, and redraws it on the canvas.//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9zcHJpdGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLE1BQU1BLE1BQU0sQ0FBQztFQUd4QkMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUFDLElBQUEsRUFBd0U7SUFBQSxJQUF0RTtNQUFDQyxRQUFRO01BQUVDLFFBQVE7TUFBRUMsS0FBSyxHQUFHLENBQUM7TUFBRUMsU0FBUyxHQUFHLENBQUM7TUFBRUMsTUFBTSxHQUFHO1FBQUNDLENBQUMsRUFBQyxDQUFDO1FBQUVDLENBQUMsRUFBRTtNQUFDO0lBQUMsQ0FBQyxHQUFBUCxJQUFBO0lBQzdGLElBQUksQ0FBQ0YsTUFBTSxHQUFHQSxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTyxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDRSxRQUFRLEdBQUdBLFFBQVEsQ0FBQyxDQUFFO0lBQzNCLElBQUksQ0FBQ08sS0FBSyxHQUFHLElBQUlDLEtBQUssRUFBRTtJQUN4QixJQUFJLENBQUNELEtBQUssQ0FBQ0UsR0FBRyxHQUFHUixRQUFRO0lBQ3pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ08sYUFBYSxHQUFHLENBQUM7SUFDdEIsSUFBSSxDQUFDQyxhQUFhLEdBQUcsQ0FBQztJQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBRyxFQUFFO0lBQ3BCLElBQUksQ0FBQ1IsTUFBTSxHQUFHQSxNQUFNO0lBRXBCLElBQUksQ0FBQ1MsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFFO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBRXZCOztFQUVBQyxJQUFJQSxDQUFBLEVBQUU7SUFDRixJQUFJLENBQUNqQixPQUFPLENBQUNrQixTQUFTLENBQ2xCLElBQUksQ0FBQ1QsS0FBSyxFQUNWLElBQUksQ0FBQ0csYUFBYSxJQUFHLElBQUksQ0FBQ0gsS0FBSyxDQUFDTSxLQUFLLEdBQUUsSUFBSSxDQUFDVixTQUFTLENBQUMsRUFDdEQsQ0FBQyxFQUNELElBQUksQ0FBQ0ksS0FBSyxDQUFDTSxLQUFLLEdBQUUsSUFBSSxDQUFDVixTQUFTLEVBQ2hDLElBQUksQ0FBQ0ksS0FBSyxDQUFDTyxNQUFNLEVBRWpCLElBQUksQ0FBQ2QsUUFBUSxDQUFDSyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxNQUFNLENBQUNDLENBQUMsRUFDL0IsSUFBSSxDQUFDTCxRQUFRLENBQUNNLENBQUMsR0FBRyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0UsQ0FBQyxFQUM5QixJQUFJLENBQUNDLEtBQUssQ0FBQ00sS0FBSyxHQUFHLElBQUksQ0FBQ1YsU0FBUyxHQUFJLElBQUksQ0FBQ0QsS0FBSyxFQUNoRCxJQUFJLENBQUNLLEtBQUssQ0FBQ08sTUFBTSxHQUFHLElBQUksQ0FBQ1osS0FBSyxDQUM3QjtFQUFBO0VBRVRlLE1BQU1BLENBQUEsRUFBRTtJQUNKLElBQUksQ0FBQ0YsSUFBSSxFQUFFO0lBQ1gsSUFBSSxDQUFDSixhQUFhLEVBQUU7SUFFcEIsSUFBRyxJQUFJLENBQUNBLGFBQWEsR0FBRyxJQUFJLENBQUNDLFVBQVUsS0FBSyxDQUFDLEVBQUM7TUFFMUMsSUFBRyxJQUFJLENBQUNGLGFBQWEsR0FBRyxJQUFJLENBQUNQLFNBQVMsR0FBRyxDQUFDLEVBQUM7UUFDdkMsSUFBSSxDQUFDTyxhQUFhLEVBQUU7TUFDeEIsQ0FBQyxNQUNHO1FBQ0EsSUFBSSxDQUFDQSxhQUFhLEdBQUcsQ0FBQztNQUMxQjtJQUNSO0VBQ0E7QUFHSjs7QUFFQTs7QUFJQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHRfZ2FtZS8uL3NyYy9zY3JpcHRzL3Nwcml0ZS5qcz8wYWM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwcml0ZSB7XG4gICAgXG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGNvbnRleHQsIHtwb3NpdGlvbiwgaW1hZ2VTcmMsIHNjYWxlID0gMSwgZnJhbWVzTWF4ID0gMSwgb2Zmc2V0ID0ge3g6MCwgeTogMH19KSB7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzOyAvLyBjcmVhdGluZyB0aGUgZnJhbWVcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsgLy8gdGhpcyBpcyB3aGVyZSB3ZSBhdHRhdGNoIG91ciBwcm9ncmFtYXRpYyBsb2dpY1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247ICAvLyBwb3NpdGlvbiBvZiBjaGFyYWN0ZXIuIENvbnRhaW5zIHgsIHlcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpXG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gaW1hZ2VTcmNcbiAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlXG4gICAgICAgIHRoaXMuZnJhbWVzTWF4ID0gZnJhbWVzTWF4XG4gICAgICAgIHRoaXMuZnJhbWVzQ3VycmVudCA9IDBcbiAgICAgICAgdGhpcy5mcmFtZXNFbGFwc2VkID0gMFxuICAgICAgICB0aGlzLmZyYW1lc0hvbGQgPSAxNVxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldFxuICAgICAgICBcbiAgICAgICAgdGhpcy53aWR0aCA9IDUwOyAgLy8gd2lkdGggb2YgbXkgY2hhcmFjdGVyIGJveC4gSW5jcmFzZXMgd2lkaHQgdG93YXJkcyByaWdodFxuICAgICAgICB0aGlzLmhlaWdodCA9IDE1MDsgLy8vIGhlaWdodCBvZiBteSBjaGFyYWN0ZXIgYm94LiBJbmNyZWFzZXMgaGVpZ2h0IHRvd2FyZHMgYm90dG9tXG4gICAgICAgICBcbiAgICB9XG5cbiAgICBkcmF3KCl7XG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICB0aGlzLmltYWdlLFxuICAgICAgICAgICAgdGhpcy5mcmFtZXNDdXJyZW50KiAodGhpcy5pbWFnZS53aWR0aCAvdGhpcy5mcmFtZXNNYXgpLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIHRoaXMuaW1hZ2Uud2lkdGgvIHRoaXMuZnJhbWVzTWF4LFxuICAgICAgICAgICAgdGhpcy5pbWFnZS5oZWlnaHQsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueCAtIHRoaXMub2Zmc2V0LngsIFxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi55IC0gdGhpcy5vZmZzZXQueSwgXG4gICAgICAgICAgICAodGhpcy5pbWFnZS53aWR0aCAvIHRoaXMuZnJhbWVzTWF4KSAqIHRoaXMuc2NhbGUsIFxuICAgICAgICAgICAgdGhpcy5pbWFnZS5oZWlnaHQgKiB0aGlzLnNjYWxlXG4gICAgICAgICAgICApfVxuXG4gICAgdXBkYXRlKCl7XG4gICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICB0aGlzLmZyYW1lc0VsYXBzZWQrK1xuXG4gICAgICAgIGlmKHRoaXMuZnJhbWVzRWxhcHNlZCAlIHRoaXMuZnJhbWVzSG9sZCA9PT0gMCl7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5mcmFtZXNDdXJyZW50IDwgdGhpcy5mcmFtZXNNYXggLSAxKXtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc0N1cnJlbnQrK1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZXNDdXJyZW50ID0gMFxuICAgICAgICAgICAgfVxuICAgIH1cbiAgICB9XG5cbiAgICBcbn1cblxuLy9zdGFydGluZyBwbGF5ZXIgc3ByaXRlXG5cblxuXG4vL1RoZSB1cGRhdGUoKSBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIHVwZGF0aW5nIHRoZSBzdGF0ZSBvZiB0aGUgc3ByaXRlIGFuZCBkcmF3aW5nIGl0IG9uIHRoZSBjYW52YXMuXG5cbi8vVGhlIGZpcnN0IHRoaW5nIHRoYXQgdGhlIG1ldGhvZCBkb2VzIGlzIGNhbGwgdGhlIGRyYXcoKSBtZXRob2QsIHdoaWNoIGRyYXdzIHRoZSBjdXJyZW50IGZyYW1lIG9mIHRoZSBzcHJpdGUgb24gdGhlIGNhbnZhcy5cblxuLy9BZnRlciBkcmF3aW5nIHRoZSBzcHJpdGUsIHRoZSBtZXRob2QgdXBkYXRlcyB0aGUgbnVtYmVyIG9mIGZyYW1lcyB0aGF0IFxuLy9oYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgZnJhbWUgY2hhbmdlLCBieSBpbmNyZW1lbnRpbmcgdGhlIGZyYW1lc0VsYXBzZWQgcHJvcGVydHkuXG5cbi8vVGhlbiwgaXQgY2hlY2tzIHdoZXRoZXIgdGhlIGZyYW1lc0VsYXBzZWQgcHJvcGVydHkgaXMgYSBtdWx0aXBsZSBvZiB0aGUgZnJhbWVzSG9sZCBwcm9wZXJ0eS4gXG4vL0lmIGl0IGlzLCBpdCBtZWFucyB0aGF0IGl0J3MgdGltZSB0byBjaGFuZ2UgdG8gdGhlIG5leHQgZnJhbWUuXG4vLyBUaGUgZnJhbWVzSG9sZCBwcm9wZXJ0eSBkZXRlcm1pbmVzIGhvdyBtYW55IGZyYW1lcyBzaG91bGQgYmUgZGlzcGxheWVkIGJlZm9yZSBzd2l0Y2hpbmcgdG8gdGhlIG5leHQgZnJhbWUgaW4gdGhlIHNwcml0ZSBhbmltYXRpb24uXG5cbi8vVGhlIG1ldGhvZCBjaGVja3MgaWYgdGhlIGZyYW1lc0N1cnJlbnQgcHJvcGVydHkgaXMgbGVzcyB0aGFuIGZyYW1lc01heCAtIDEsIFxuLy93aGljaCBtZWFucyB0aGF0IHRoZXJlIGFyZSBtb3JlIGZyYW1lcyB0byBzaG93LiBJZiB0aGVyZSBhcmUsIHRoZSBtZXRob2QgaW5jcmVtZW50cyB0aGUgZnJhbWVzQ3VycmVudCBwcm9wZXJ0eSBieSAxIHRvIG1vdmUgdG8gdGhlIG5leHQgZnJhbWUuXG5cbi8vSWYgdGhlIGZyYW1lc0N1cnJlbnQgcHJvcGVydHkgaXMgYWxyZWFkeSBlcXVhbCB0byBmcmFtZXNNYXggLSAxLCBcbi8vaXQgbWVhbnMgdGhhdCB0aGUgc3ByaXRlIGhhcyByZWFjaGVkIHRoZSBsYXN0IGZyYW1lLiBJbiB0aGlzIGNhc2UsIHRoZSBtZXRob2Qgc2V0cyB0aGUgZnJhbWVzQ3VycmVudCBwcm9wZXJ0eSBcbi8vYmFjayB0byAwIHRvIHN0YXJ0IHRoZSBhbmltYXRpb24gb3ZlciBhZ2Fpbi5cblxuLy9PdmVyYWxsLCB0aGUgdXBkYXRlKCkgbWV0aG9kIHVwZGF0ZXMgdGhlIHN0YXRlIG9mIHRoZSBzcHJpdGUsIGluY2x1ZGluZyBpdHMgZnJhbWUgYW5pbWF0aW9uLCBhbmQgcmVkcmF3cyBpdCBvbiB0aGUgY2FudmFzLiJdLCJuYW1lcyI6WyJTcHJpdGUiLCJjb25zdHJ1Y3RvciIsImNhbnZhcyIsImNvbnRleHQiLCJfcmVmIiwicG9zaXRpb24iLCJpbWFnZVNyYyIsInNjYWxlIiwiZnJhbWVzTWF4Iiwib2Zmc2V0IiwieCIsInkiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiZnJhbWVzQ3VycmVudCIsImZyYW1lc0VsYXBzZWQiLCJmcmFtZXNIb2xkIiwid2lkdGgiLCJoZWlnaHQiLCJkcmF3IiwiZHJhd0ltYWdlIiwidXBkYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/sprite.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dhbWUvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;