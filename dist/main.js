/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/character */ \"./src/scripts/character.js\");\n/* harmony import */ var _scripts_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sprite */ \"./src/scripts/sprite.js\");\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.querySelector('canvas');\n  const context = canvas.getContext('2d'); // c is context\n\n  canvas.width = 1024;\n  canvas.height = 576;\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  // creatae a new player\n\n  const player = new _scripts_character__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, context, {\n    // creating the position and velocity as a key: value pair\n    position: {\n      x: 0,\n      y: 150 // so that we start at the bottom of the frame\n    },\n\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: 'green',\n    offset: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/Martial/Sprites/Idle.png',\n    framesMax: 8,\n    scale: 2.5,\n    offset: {\n      x: 215,\n      y: 157\n    },\n    sprites: {\n      idle: {\n        imageSrc: 'assets/Martial/Sprites/Idle.png',\n        framesMax: 8\n      },\n      run: {\n        imageSrc: 'assets/Martial/Sprites/Run.png',\n        framesMax: 8\n        //image: new Image()\n      },\n\n      jump: {\n        imageSrc: 'assets/Martial/Sprites/Jump.png',\n        framesMax: 2\n        //image: new Image()\n      },\n\n      fall: {\n        imageSrc: 'assets/Martial/Sprites/Fall.png',\n        framesMax: 2,\n        image: new Image()\n      },\n      attack1: {\n        imageSrc: 'assets/Martial/Sprites/Attack1.png',\n        framesMax: 6\n        //image: new Image()\n      },\n\n      takeHit: {\n        imageSrc: 'assets/Martial/Sprites/TakeHit.png',\n        framesMax: 4\n        //image: new Image()\n      },\n\n      death: {\n        imageSrc: 'assets/Martial/Sprites/Death.png',\n        framesMax: 6\n        //image: new Image()\n      }\n    },\n\n    attackBox: {\n      offset: {\n        x: 0,\n        y: 0\n      },\n      width: 200,\n      height: 50\n    }\n  });\n  console.log(player);\n  const enemy = new _scripts_character__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, context, {\n    position: {\n      x: 700,\n      y: 150\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: 'blue',\n    offset: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/King/Sprites/Idle.png',\n    /////////////\n    framesMax: 8,\n    scale: 2.5,\n    offset: {\n      x: 215,\n      y: 110\n    },\n    sprites: {\n      idle: {\n        imageSrc: 'assets/King/Sprites/Idle.png',\n        framesMax: 8\n      },\n      run: {\n        imageSrc: 'assets/King/Sprites/Run.png',\n        framesMax: 8,\n        image: new Image()\n      },\n      jump: {\n        imageSrc: 'assets/King/Sprites/Jump.png',\n        framesMax: 2,\n        image: new Image()\n      },\n      fall: {\n        imageSrc: 'assets/King/Sprites/Fall.png',\n        framesMax: 2,\n        image: new Image()\n      },\n      attack1: {\n        imageSrc: 'assets/King/Sprites/Attack1.png',\n        framesMax: 6,\n        image: new Image()\n      },\n      takeHit: {\n        imageSrc: 'assets/King/Sprites/TakeHit.png',\n        framesMax: 4,\n        image: new Image()\n      },\n      death: {\n        imageSrc: 'assets/King/Sprites/Death.png',\n        framesMax: 6,\n        image: new Image()\n      }\n    },\n    attackBox: {\n      offset: {\n        x: -100,\n        y: 0\n      },\n      width: 100,\n      height: 50\n    }\n  });\n  const background = new _scripts_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](canvas, context, {\n    position: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/game_background_3/background.png'\n  });\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    w: {\n      pressed: false\n    }\n  };\n  function attackCollision(player1, player2) {\n    return player1.attackRect.position.x + player1.attackRect.width >= player2.attackRect.position.x && player1.attackRect.position.x <= player2.attackRect.position.x + player2.attackRect.width && player1.attackRect.position.y + player1.attackRect.height >= player2.attackRect.position.y && player1.attackRect.position.y <= player2.attackRect.position.y + player2.attackRect.height;\n  }\n  function endgameFunc(_ref) {\n    let {\n      player,\n      enemy,\n      timerId\n    } = _ref;\n    clearTimeout(timerId);\n    document.querySelector('#textresult').style.display = 'flex';\n    if (player.health === enemy.health) {\n      document.querySelector('#textresult').innerHTML = 'Tie';\n      document.querySelector('#textresult').style.display = 'flex';\n    } else if (player.health > enemy.health) {\n      document.querySelector('#textresult').innerHTML = 'PLAYER 1 WINS';\n      document.querySelector('#textresult').style.display = 'flex';\n    } else if (enemy.health > player.health) {\n      document.querySelector('#textresult').innerHTML = 'PLAYER 2 WINS';\n      document.querySelector('#textresult').style.display = 'flex';\n    }\n  }\n  let timer = 45;\n  let timerId;\n  function countdown() {\n    if (timer > 0) {\n      timerId = setTimeout(countdown, 1000); // set interval allows multiple execution of code in set interval; setTimeout allows one execution\n      timer--;\n      document.querySelector(\"#timer\").innerHTML = timer;\n    }\n    if (timer === 0) {\n      document.querySelector('#textresult').style.display = 'flex';\n      endgameFunc({\n        player,\n        enemy\n      });\n    }\n  }\n  countdown();\n  function movement() {\n    context.fillStyle = \"black\"; // this is done so that when we call movement the color of the canvas doesn't turn red bcs of \n    // this.context.fillStyle = \"red\" in draw() method\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    window.requestAnimationFrame(movement); // this calls movement function on an endless loop\n    background.update();\n    player.update();\n    enemy.update();\n    console.log(\"playerstatus \", player.attacking);\n    setInterval(() => {\n\n      //enemy.velocity.x =  -0.5\n      // enemy.attack()\n    }, 5000);\n    player.velocity.x = 0;\n    if (keys.a.pressed) {\n      player.velocity.x = -5;\n      player.switchSprites('run');\n    } else if (keys.d.pressed) {\n      player.velocity.x = 5;\n      player.switchSprites('run');\n    } else if (keys.w.pressed) {\n      // if(player.position.y > 0){\n      player.velocity.y = -10;\n      // }\n    } else {\n      player.switchSprites('idle');\n    }\n    if (player.velocity.y < 0) {\n      player.switchSprites('jump');\n    } else if (player.velocity.y > 0) {\n      player.switchSprites('fall');\n    }\n\n    //collision detection\n    if (attackCollision(player, enemy) && player.attacking) {\n      // enemy.switchSprites('takeHit')\n      // enemy.health -= 5;\n      enemy.takeHit();\n      console.log(\"enemyHP \", enemy.health);\n      player.attacking = false;\n      // document.querySelector('#enemyHealth').style.width = enemy.health + '%';\n      gsap.to('#enemyHealth', {\n        width: enemy.health + '%'\n      });\n    }\n    if (attackCollision(enemy, player) && enemy.attacking) {\n      // player.switchSprites('takeHit')\n      // player.health -= 5;\n      player.takeHit();\n      enemy.attacking = false;\n      console.log(\"playerHP \", player.health);\n      // player.health -= 1; \n      // document.querySelector('#playerHealth').style.width = player.health + '%';\n      gsap.to('#playerHealth', {\n        width: player.health + '%'\n      });\n    }\n\n    // end game logic\n    if (enemy.health <= 0 || player.health <= 0) {\n      endgameFunc({\n        player,\n        enemy,\n        timerId\n      });\n    }\n  }\n  movement();\n  window.addEventListener('keydown', event => {\n    //keydown is a key that allows for recognition of keyboard inputs on the console\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = true; // when i press d movement function picks it up bcs it is running \n        // every unit of time. \n        // player.image = player.sprites.run.image\n        break;\n      case 'a':\n        keys.a.pressed = true;\n        // player.image = player.sprites.run.image\n        break;\n      case 'w':\n        keys.w.pressed = true;\n        break;\n      case 'k':\n        player.attack();\n        break;\n    }\n    console.log(event.key);\n  });\n  window.addEventListener('keyup', event => {\n    //keydown is a key that allows for recognition of keyboard inputs on the console\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = false; // when i release d, movement functuin picks it up bcs it's running\n        // every unit of time\n        break;\n      case 'a':\n        keys.a.pressed = false;\n        break;\n      case 'w':\n        keys.w.pressed = false;\n        console.log(\"released\", event.key);\n    }\n  });\n});\n\n// randomize attakcs ??????\n// invert image   -----------DONE\n// negate attack range (make enemy attack negative)  ----- DONE\n// enemy sprite edit ----- DONE\n// build AI ???????//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0VBQzFCLENBQUMsQ0FBQztFQUVGVCxNQUFNLENBQUN2RCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUcrRCxLQUFLLElBQUk7SUFBSTtJQUMzQyxRQUFPQSxLQUFLLENBQUNDLEdBQUc7TUFDWixLQUFLLEdBQUc7UUFDSi9CLElBQUksQ0FBQ0csQ0FBQyxDQUFDRCxPQUFPLEdBQUcsS0FBSyxFQUFDO1FBQ3ZCO1FBQ0o7TUFDQSxLQUFLLEdBQUc7UUFDSkYsSUFBSSxDQUFDQyxDQUFDLENBQUNDLE9BQU8sR0FBRyxLQUFLO1FBQzFCO01BQ0EsS0FBSyxHQUFHO1FBQ0pGLElBQUksQ0FBQ0ksQ0FBQyxDQUFDRixPQUFPLEdBQUcsS0FBSztRQUN0Qk4sT0FBTyxDQUFDQyxHQUFHLENBQUMsVUFBVSxFQUFDaUMsS0FBSyxDQUFDQyxHQUFHLENBQUM7SUFBQztFQUk5QyxDQUFDLENBQUM7QUFFTixDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHRfZ2FtZS8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcIi4vc2NyaXB0cy9jaGFyYWN0ZXJcIlxuaW1wb3J0IFNwcml0ZSBmcm9tIFwiLi9zY3JpcHRzL3Nwcml0ZVwiXG5cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIFxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsgIC8vIGMgaXMgY29udGV4dFxuXG4gICAgY2FudmFzLndpZHRoID0gMTAyNDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gNTc2O1xuXG4gICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgICAvLyBjcmVhdGFlIGEgbmV3IHBsYXllclxuXG4gICAgY29uc3QgcGxheWVyID0gbmV3IENoYXJhY3RlcihjYW52YXMsY29udGV4dCwgeyAgICAvLyBjcmVhdGluZyB0aGUgcG9zaXRpb24gYW5kIHZlbG9jaXR5IGFzIGEga2V5OiB2YWx1ZSBwYWlyXG4gICAgICAgIHBvc2l0aW9uOntcbiAgICAgICAgICAgIHg6IDAsIFxuICAgICAgICAgICAgeTogMTUwIC8vIHNvIHRoYXQgd2Ugc3RhcnQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgZnJhbWVcbiAgICAgICAgfSxcbiAgICAgICAgdmVsb2NpdHk6e1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6MFxuICAgICAgICB9LFxuICAgICAgICBjb2xvcjogJ2dyZWVuJyxcblxuICAgICAgICBvZmZzZXQ6e1xuICAgICAgICAgICAgeDowLFxuICAgICAgICAgICAgeTowXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL01hcnRpYWwvU3ByaXRlcy9JZGxlLnBuZycsXG4gICAgICAgIGZyYW1lc01heDogOCxcbiAgICAgICAgc2NhbGU6IDIuNSxcbiAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgICB4OiAyMTUsXG4gICAgICAgICAgICB5OiAxNTdcbiAgICAgICAgfSxcbiAgICAgICAgc3ByaXRlczoge1xuICAgICAgICAgICAgaWRsZTp7XG4gICAgICAgICAgICAgICAgaW1hZ2VTcmM6ICdhc3NldHMvTWFydGlhbC9TcHJpdGVzL0lkbGUucG5nJyxcbiAgICAgICAgICAgICAgICBmcmFtZXNNYXg6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBydW46e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL01hcnRpYWwvU3ByaXRlcy9SdW4ucG5nJyxcbiAgICAgICAgICAgICAgICBmcmFtZXNNYXg6IDgsXG4gICAgICAgICAgICAgICAgLy9pbWFnZTogbmV3IEltYWdlKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBqdW1wOntcbiAgICAgICAgICAgICAgICBpbWFnZVNyYzogJ2Fzc2V0cy9NYXJ0aWFsL1Nwcml0ZXMvSnVtcC5wbmcnLFxuICAgICAgICAgICAgICAgIGZyYW1lc01heDogMixcbiAgICAgICAgICAgICAgICAvL2ltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhbGw6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL01hcnRpYWwvU3ByaXRlcy9GYWxsLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiAyLFxuICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dGFjazE6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL01hcnRpYWwvU3ByaXRlcy9BdHRhY2sxLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiA2LFxuICAgICAgICAgICAgICAgIC8vaW1hZ2U6IG5ldyBJbWFnZSgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFrZUhpdDp7XG4gICAgICAgICAgICAgICAgaW1hZ2VTcmM6ICdhc3NldHMvTWFydGlhbC9TcHJpdGVzL1Rha2VIaXQucG5nJyxcbiAgICAgICAgICAgICAgICBmcmFtZXNNYXg6IDQsXG4gICAgICAgICAgICAgICAgLy9pbWFnZTogbmV3IEltYWdlKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWF0aDp7XG4gICAgICAgICAgICAgICAgaW1hZ2VTcmM6ICdhc3NldHMvTWFydGlhbC9TcHJpdGVzL0RlYXRoLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiA2LFxuICAgICAgICAgICAgICAgIC8vaW1hZ2U6IG5ldyBJbWFnZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF0dGFja0JveDoge1xuICAgICAgICAgICAgb2Zmc2V0OntcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgaGVpZ2h0OiA1MFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocGxheWVyKVxuXG4gICAgXG5cbiAgICBcbiAgICBcbiAgICBjb25zdCBlbmVteSA9IG5ldyBDaGFyYWN0ZXIoY2FudmFzLCBjb250ZXh0LCB7XG4gICAgICAgIHBvc2l0aW9uOntcbiAgICAgICAgICAgIHg6IDcwMCwgXG4gICAgICAgICAgICB5OiAxNTBcbiAgICAgICAgfSxcbiAgICAgICAgdmVsb2NpdHk6e1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6MFxuICAgICAgICB9LFxuICAgICAgICBjb2xvcjogJ2JsdWUnLFxuICAgICAgICBvZmZzZXQ6e1xuICAgICAgICAgICAgeDowLFxuICAgICAgICAgICAgeTowXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL0tpbmcvU3ByaXRlcy9JZGxlLnBuZycsICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vL1xuICAgICAgICBmcmFtZXNNYXg6IDgsXG4gICAgICAgIHNjYWxlOiAyLjUsXG4gICAgICAgIG9mZnNldDoge1xuICAgICAgICAgICAgeDogMjE1LFxuICAgICAgICAgICAgeTogMTEwXG4gICAgICAgIH0sXG4gICAgICAgIHNwcml0ZXM6IHtcbiAgICAgICAgICAgIGlkbGU6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL0tpbmcvU3ByaXRlcy9JZGxlLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnVuOntcbiAgICAgICAgICAgICAgICBpbWFnZVNyYzogJ2Fzc2V0cy9LaW5nL1Nwcml0ZXMvUnVuLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiA4LFxuICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGp1bXA6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL0tpbmcvU3ByaXRlcy9KdW1wLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiAyLFxuICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhbGw6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL0tpbmcvU3ByaXRlcy9GYWxsLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiAyLFxuICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dGFjazE6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL0tpbmcvU3ByaXRlcy9BdHRhY2sxLnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiA2LFxuICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRha2VIaXQ6e1xuICAgICAgICAgICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL0tpbmcvU3ByaXRlcy9UYWtlSGl0LnBuZycsXG4gICAgICAgICAgICAgICAgZnJhbWVzTWF4OiA0LFxuICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgSW1hZ2UoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlYXRoOntcbiAgICAgICAgICAgICAgICBpbWFnZVNyYzogJ2Fzc2V0cy9LaW5nL1Nwcml0ZXMvRGVhdGgucG5nJyxcbiAgICAgICAgICAgICAgICBmcmFtZXNNYXg6IDYsXG4gICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBJbWFnZSgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGF0dGFja0JveDoge1xuICAgICAgICAgICAgb2Zmc2V0OntcbiAgICAgICAgICAgICAgICB4OiAtMTAwLFxuICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiA1MFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pO1xuXG4gICAgY29uc3QgYmFja2dyb3VuZCA9IG5ldyBTcHJpdGUoY2FudmFzLCBjb250ZXh0LCB7XG4gICAgICAgIHBvc2l0aW9uOntcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlU3JjOiAnYXNzZXRzL2dhbWVfYmFja2dyb3VuZF8zL2JhY2tncm91bmQucG5nJ1xuICAgICAgICBcbiAgICB9KVxuXG4gICAgY29uc3Qga2V5cyA9IHtcbiAgICAgICAgYToge1xuICAgICAgICAgICAgcHJlc3NlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZDoge1xuICAgICAgICAgICAgcHJlc3NlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdzp7XG4gICAgICAgICAgICBwcmVzc2VkOiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuICAgXG5cbiAgICBmdW5jdGlvbiBhdHRhY2tDb2xsaXNpb24ocGxheWVyMSwgcGxheWVyMil7XG4gICAgICAgIHJldHVybihcbiAgICAgICAgICAgIHBsYXllcjEuYXR0YWNrUmVjdC5wb3NpdGlvbi54ICsgcGxheWVyMS5hdHRhY2tSZWN0LndpZHRoID49IHBsYXllcjIuYXR0YWNrUmVjdC5wb3NpdGlvbi54XG4gICAgICAgICAgICAmJiBcbiAgICAgICAgICAgIHBsYXllcjEuYXR0YWNrUmVjdC5wb3NpdGlvbi54IDw9IHBsYXllcjIuYXR0YWNrUmVjdC5wb3NpdGlvbi54ICsgcGxheWVyMi5hdHRhY2tSZWN0LndpZHRoXG4gICAgICAgICAgICAmJiBcbiAgICAgICAgICAgIHBsYXllcjEuYXR0YWNrUmVjdC5wb3NpdGlvbi55ICsgcGxheWVyMS5hdHRhY2tSZWN0LmhlaWdodCA+PSBwbGF5ZXIyLmF0dGFja1JlY3QucG9zaXRpb24ueVxuICAgICAgICAgICAgJiZcbiAgICAgICAgICAgIHBsYXllcjEuYXR0YWNrUmVjdC5wb3NpdGlvbi55IDw9IHBsYXllcjIuYXR0YWNrUmVjdC5wb3NpdGlvbi55ICsgcGxheWVyMi5hdHRhY2tSZWN0LmhlaWdodFxuICAgICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kZ2FtZUZ1bmMoe3BsYXllciwgZW5lbXksIHRpbWVySWR9KXtcbiAgICAgICAgXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcblxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGV4dHJlc3VsdCcpLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7IFxuICAgICAgICBpZihwbGF5ZXIuaGVhbHRoID09PSBlbmVteS5oZWFsdGgpe1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RleHRyZXN1bHQnKS5pbm5lckhUTUwgPSAnVGllJ1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RleHRyZXN1bHQnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOyBcbiAgICAgICAgfWVsc2UgaWYocGxheWVyLmhlYWx0aCA+IGVuZW15LmhlYWx0aCl7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGV4dHJlc3VsdCcpLmlubmVySFRNTCA9ICdQTEFZRVIgMSBXSU5TJ1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RleHRyZXN1bHQnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOyBcbiAgICAgICAgfWVsc2UgaWYoZW5lbXkuaGVhbHRoID4gcGxheWVyLmhlYWx0aCl7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGV4dHJlc3VsdCcpLmlubmVySFRNTCA9ICdQTEFZRVIgMiBXSU5TJ1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RleHRyZXN1bHQnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOyBcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsZXQgdGltZXIgPSA0NTtcbiAgICBsZXQgdGltZXJJZDtcbiAgICBmdW5jdGlvbiBjb3VudGRvd24oKSAge1xuICAgICAgICBpZih0aW1lciA+IDApe1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dChjb3VudGRvd24sIDEwMDApICAgLy8gc2V0IGludGVydmFsIGFsbG93cyBtdWx0aXBsZSBleGVjdXRpb24gb2YgY29kZSBpbiBzZXQgaW50ZXJ2YWw7IHNldFRpbWVvdXQgYWxsb3dzIG9uZSBleGVjdXRpb25cbiAgICAgICAgICAgIHRpbWVyIC0tIDtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGltZXJcIikuaW5uZXJIVE1MID0gdGltZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGltZXIgPT09IDApe1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RleHRyZXN1bHQnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOyBcbiAgICAgICAgICAgIGVuZGdhbWVGdW5jKHtwbGF5ZXIsIGVuZW15fSk7XG4gICAgICAgIH0gICBcbiAgICB9XG5cbiAgICBjb3VudGRvd24oKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVtZW50KCl7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiOyAgLy8gdGhpcyBpcyBkb25lIHNvIHRoYXQgd2hlbiB3ZSBjYWxsIG1vdmVtZW50IHRoZSBjb2xvciBvZiB0aGUgY2FudmFzIGRvZXNuJ3QgdHVybiByZWQgYmNzIG9mIFxuICAgICAgICAvLyB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZWRcIiBpbiBkcmF3KCkgbWV0aG9kXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZW1lbnQpIC8vIHRoaXMgY2FsbHMgbW92ZW1lbnQgZnVuY3Rpb24gb24gYW4gZW5kbGVzcyBsb29wXG4gICAgICAgIGJhY2tncm91bmQudXBkYXRlKCk7XG4gICAgICAgIHBsYXllci51cGRhdGUoKTtcbiAgICAgICAgZW5lbXkudXBkYXRlKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcInBsYXllcnN0YXR1cyBcIiwgcGxheWVyLmF0dGFja2luZylcblxuICAgICAgICBzZXRJbnRlcnZhbCgoKT0+e1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2VuZW15LnZlbG9jaXR5LnggPSAgLTAuNVxuICAgICAgICAgICAgLy8gZW5lbXkuYXR0YWNrKClcbiAgICAgICAgfSw1MDAwKVxuXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcGxheWVyLnZlbG9jaXR5LnggPSAwO1xuXG4gICAgICAgIFxuICAgICAgICBpZihrZXlzLmEucHJlc3NlZCApe1xuICAgICAgICAgICAgcGxheWVyLnZlbG9jaXR5LnggPSAtNVxuICAgICAgICAgICAgcGxheWVyLnN3aXRjaFNwcml0ZXMoJ3J1bicpXG4gICAgICAgIH1lbHNlIGlmKGtleXMuZC5wcmVzc2VkICl7XG4gICAgICAgICAgICBwbGF5ZXIudmVsb2NpdHkueCA9IDVcbiAgICAgICAgICAgIHBsYXllci5zd2l0Y2hTcHJpdGVzKCdydW4nKVxuICAgICAgICB9ZWxzZSBpZihrZXlzLncucHJlc3NlZCApe1xuICAgICAgICAgICAgLy8gaWYocGxheWVyLnBvc2l0aW9uLnkgPiAwKXtcbiAgICAgICAgICAgICAgICBwbGF5ZXIudmVsb2NpdHkueSA9IC0xMFxuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHBsYXllci5zd2l0Y2hTcHJpdGVzKCdpZGxlJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHBsYXllci52ZWxvY2l0eS55IDwgMCl7XG4gICAgICAgICAgICBwbGF5ZXIuc3dpdGNoU3ByaXRlcygnanVtcCcpXG4gICAgICAgIH0gZWxzZSBpZihwbGF5ZXIudmVsb2NpdHkueSA+IDApe1xuICAgICAgICAgICAgcGxheWVyLnN3aXRjaFNwcml0ZXMoJ2ZhbGwnKVxuICAgICAgICB9XG5cbiAgICAgICAgLy9jb2xsaXNpb24gZGV0ZWN0aW9uXG4gICAgICAgIGlmKCBhdHRhY2tDb2xsaXNpb24oXG4gICAgICAgICAgICBwbGF5ZXIsXG4gICAgICAgICAgICBlbmVteVxuICAgICAgICApXG4gICAgICAgICAgICAmJlxuICAgICAgICAgICAgcGxheWVyLmF0dGFja2luZyl7XG4gICAgICAgICAgICAgICAgLy8gZW5lbXkuc3dpdGNoU3ByaXRlcygndGFrZUhpdCcpXG4gICAgICAgICAgICAgICAgLy8gZW5lbXkuaGVhbHRoIC09IDU7XG4gICAgICAgICAgICAgICAgZW5lbXkudGFrZUhpdCgpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlbmVteUhQIFwiLGVuZW15LmhlYWx0aClcbiAgICAgICAgICAgICAgICBwbGF5ZXIuYXR0YWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VuZW15SGVhbHRoJykuc3R5bGUud2lkdGggPSBlbmVteS5oZWFsdGggKyAnJSc7XG4gICAgICAgICAgICAgICAgZ3NhcC50bygnI2VuZW15SGVhbHRoJywge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogZW5lbXkuaGVhbHRoICsgJyUnXG4gICAgICAgICAgICAgICAgfSlcbiAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCBhdHRhY2tDb2xsaXNpb24oXG4gICAgICAgICAgICBlbmVteSxcbiAgICAgICAgICAgIHBsYXllclxuICAgICAgICApXG4gICAgICAgICAgICAmJlxuICAgICAgICAgICAgZW5lbXkuYXR0YWNraW5nKXtcbiAgICAgICAgICAgICAgICAvLyBwbGF5ZXIuc3dpdGNoU3ByaXRlcygndGFrZUhpdCcpXG4gICAgICAgICAgICAgICAgLy8gcGxheWVyLmhlYWx0aCAtPSA1O1xuICAgICAgICAgICAgICAgIHBsYXllci50YWtlSGl0KClcbiAgICAgICAgICAgICAgICBlbmVteS5hdHRhY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInBsYXllckhQIFwiLCBwbGF5ZXIuaGVhbHRoKVxuICAgICAgICAgICAgICAgIC8vIHBsYXllci5oZWFsdGggLT0gMTsgXG4gICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllckhlYWx0aCcpLnN0eWxlLndpZHRoID0gcGxheWVyLmhlYWx0aCArICclJztcbiAgICAgICAgICAgICAgICBnc2FwLnRvKCcjcGxheWVySGVhbHRoJywge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyLmhlYWx0aCArICclJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbmQgZ2FtZSBsb2dpY1xuICAgICAgICBpZihlbmVteS5oZWFsdGggPD0gMCB8fCBwbGF5ZXIuaGVhbHRoIDw9MCApe1xuICAgICAgICAgICAgZW5kZ2FtZUZ1bmMoe3BsYXllciwgZW5lbXksIHRpbWVySWR9KTtcbiAgICAgICAgfVxuICAgIFxuICAgIH1cbiAgICBtb3ZlbWVudCgpO1xuXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT57ICAgLy9rZXlkb3duIGlzIGEga2V5IHRoYXQgYWxsb3dzIGZvciByZWNvZ25pdGlvbiBvZiBrZXlib2FyZCBpbnB1dHMgb24gdGhlIGNvbnNvbGVcbiAgICAgICAgc3dpdGNoKGV2ZW50LmtleSl7XG4gICAgICAgICAgICBjYXNlICdkJzogXG4gICAgICAgICAgICAgICAga2V5cy5kLnByZXNzZWQgPSB0cnVlIC8vIHdoZW4gaSBwcmVzcyBkIG1vdmVtZW50IGZ1bmN0aW9uIHBpY2tzIGl0IHVwIGJjcyBpdCBpcyBydW5uaW5nIFxuICAgICAgICAgICAgICAgIC8vIGV2ZXJ5IHVuaXQgb2YgdGltZS4gXG4gICAgICAgICAgICAgICAgLy8gcGxheWVyLmltYWdlID0gcGxheWVyLnNwcml0ZXMucnVuLmltYWdlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnYSc6IFxuICAgICAgICAgICAgICAgIGtleXMuYS5wcmVzc2VkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIC8vIHBsYXllci5pbWFnZSA9IHBsYXllci5zcHJpdGVzLnJ1bi5pbWFnZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGtleXMudy5wcmVzc2VkID0gdHJ1ZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ2snOlxuICAgICAgICAgICAgICAgIHBsYXllci5hdHRhY2soKTsgXG4gICAgICAgICAgICBicmVhayAgXG4gICAgICAgIH1cblxuXG4gICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmtleSk7XG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT57ICAgLy9rZXlkb3duIGlzIGEga2V5IHRoYXQgYWxsb3dzIGZvciByZWNvZ25pdGlvbiBvZiBrZXlib2FyZCBpbnB1dHMgb24gdGhlIGNvbnNvbGVcbiAgICAgICAgc3dpdGNoKGV2ZW50LmtleSl7XG4gICAgICAgICAgICBjYXNlICdkJzogXG4gICAgICAgICAgICAgICAga2V5cy5kLnByZXNzZWQgPSBmYWxzZSAvLyB3aGVuIGkgcmVsZWFzZSBkLCBtb3ZlbWVudCBmdW5jdHVpbiBwaWNrcyBpdCB1cCBiY3MgaXQncyBydW5uaW5nXG4gICAgICAgICAgICAgICAgLy8gZXZlcnkgdW5pdCBvZiB0aW1lXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnYSc6IFxuICAgICAgICAgICAgICAgIGtleXMuYS5wcmVzc2VkID0gZmFsc2VcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBrZXlzLncucHJlc3NlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWxlYXNlZFwiLGV2ZW50LmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH0pXG5cbn0pXG5cbi8vIHJhbmRvbWl6ZSBhdHRha2NzID8/Pz8/P1xuLy8gaW52ZXJ0IGltYWdlICAgLS0tLS0tLS0tLS1ET05FXG4vLyBuZWdhdGUgYXR0YWNrIHJhbmdlIChtYWtlIGVuZW15IGF0dGFjayBuZWdhdGl2ZSkgIC0tLS0tIERPTkVcbi8vIGVuZW15IHNwcml0ZSBlZGl0IC0tLS0tIERPTkVcbi8vIGJ1aWxkIEFJID8/Pz8/Pz9cblxuXG5cblxuIl0sIm5hbWVzIjpbIkNoYXJhY3RlciIsIlNwcml0ZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbnZhcyIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbFJlY3QiLCJwbGF5ZXIiLCJwb3NpdGlvbiIsIngiLCJ5IiwidmVsb2NpdHkiLCJjb2xvciIsIm9mZnNldCIsImltYWdlU3JjIiwiZnJhbWVzTWF4Iiwic2NhbGUiLCJzcHJpdGVzIiwiaWRsZSIsInJ1biIsImp1bXAiLCJmYWxsIiwiaW1hZ2UiLCJJbWFnZSIsImF0dGFjazEiLCJ0YWtlSGl0IiwiZGVhdGgiLCJhdHRhY2tCb3giLCJjb25zb2xlIiwibG9nIiwiZW5lbXkiLCJiYWNrZ3JvdW5kIiwia2V5cyIsImEiLCJwcmVzc2VkIiwiZCIsInciLCJhdHRhY2tDb2xsaXNpb24iLCJwbGF5ZXIxIiwicGxheWVyMiIsImF0dGFja1JlY3QiLCJlbmRnYW1lRnVuYyIsIl9yZWYiLCJ0aW1lcklkIiwiY2xlYXJUaW1lb3V0Iiwic3R5bGUiLCJkaXNwbGF5IiwiaGVhbHRoIiwiaW5uZXJIVE1MIiwidGltZXIiLCJjb3VudGRvd24iLCJzZXRUaW1lb3V0IiwibW92ZW1lbnQiLCJmaWxsU3R5bGUiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJhdHRhY2tpbmciLCJzZXRJbnRlcnZhbCIsInN3aXRjaFNwcml0ZXMiLCJnc2FwIiwidG8iLCJldmVudCIsImtleSIsImF0dGFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/character.js":
/*!**********************************!*\
  !*** ./src/scripts/character.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Character; }\n/* harmony export */ });\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite */ \"./src/scripts/sprite.js\");\n\nconst gravity = 0.7;\nclass Character extends _sprite__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  // add canvas and context as arguments for constructor as they were created in a different class file//\n\n  constructor(canvas, context, _ref) {\n    let {\n      position,\n      velocity,\n      color,\n      // offset, \n      imageSrc,\n      scale = 1,\n      framesMax = 1,\n      offset = {\n        x: 0,\n        y: 0\n      },\n      sprites,\n      attackBox = {\n        offset: {},\n        width: undefined,\n        height: undefined\n      }\n    } = _ref;\n    super(canvas, context, {\n      position,\n      imageSrc,\n      scale,\n      framesMax,\n      offset\n    });\n    this.canvas = canvas; // creating the frame\n    this.context = context; // this is where we attatch our programatic logic\n    // this.position = position;  // position of character. Contains x, y\n    this.velocity = velocity; // velocity of character. Contains x, y. Only use is to be added to position(change position)\n    this.color = color;\n    this.width = 50; // width of my character box. Incrases widht towards right\n    this.height = 150; /// height of my character box. Increases height towards bottom\n\n    this.attackRect = {\n      position: {\n        x: this.position.x,\n        y: this.position.y\n      },\n      offset: attackBox.offset,\n      width: attackBox.width,\n      height: attackBox.height\n    };\n    this.attacking;\n    this.health = 100;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.sprites = sprites;\n    this.dead = false;\n    for (const sprite in this.sprites) {\n      sprites[sprite].image = new Image();\n      sprites[sprite].image.src = sprites[sprite].imageSrc;\n    }\n  }\n  update() {\n    // this is not the update for the entire fram. this just updates the specific character.\n    // update gets called every unit of timein movement();\n    this.draw();\n    if (!this.dead) {\n      this.framesElapsed++;\n      if (this.framesElapsed % this.framesHold === 0) {\n        if (this.framesCurrent < this.framesMax - 1) {\n          this.framesCurrent++;\n        } else {\n          this.framesCurrent = 0;\n        }\n      }\n    }\n    this.attackRect.position.x = this.position.x + this.attackRect.offset.x;\n    this.attackRect.position.y = this.position.y;\n    //this.context.fillRect(this.attackRect.position.x, this.attackRect.position.y,\n    //   this.attackRect.width, this.attackRect.height);  ///////////////////////////////////////////\n\n    if (this.position.x < 0) {\n      this.position.x = 0;\n    } else if (this.position.x > this.canvas.width) {\n      this.position.x = this.canvas.width;\n    } else {\n      this.position.x += this.velocity.x;\n    }\n    //console.log(\"PRINTING POS X\", this.position.x)\n\n    // if character position becomes < 0, this means it's in the ceiling. stop code from reducing the value \n    //of y anymore\n    if (this.position.y < 0) {\n      this.velocity.y = gravity; // gravity is what brings it back down from the ceiling\n    }\n\n    this.position.y += this.velocity.y;\n    if (this.position.y + this.height + this.velocity.y >= this.canvas.height) {\n      this.velocity.y = 0; //stopping movement when the user chareacter is >= canvas height(boundary wall)\n    } else {\n      this.velocity.y += gravity; // adding gravity prevents the characters from leaving the screen\n    }\n  }\n\n  attack() {\n    this.switchSprites('attack1');\n    this.attacking = true;\n    setTimeout(() => {\n      this.attacking = false;\n    }, 1000);\n  }\n  takeHit() {\n    this.switchSprites('takeHit');\n    console.log(\"here\");\n    this.health -= 3;\n    if (this.health <= 0) {\n      this.switchSprites('death');\n    } else {\n      // this.switchSprites('takeHit')\n    }\n  }\n  switchSprites(sprite) {\n    // if dead we won't do anymore sprites\n    if (this.image === this.sprites.death.image) {\n      if (this.framesCurrent === this.sprites.death.framesMax - 1) this.dead = true;\n      return;\n    }\n\n    // overriding all other animations with attack animation\n    if (this.image === this.sprites.attack1.image && this.framesCurrent < this.sprites.attack1.framesMax - 1) return;\n\n    // overrride when fighter gets hit\n\n    if (this.image === this.sprites.takeHit.image && this.framesCurrent < this.sprites.takeHit.framesMax - 1) return;\n    switch (sprite) {\n      case 'idle':\n        if (this.image !== this.sprites.idle.image) {\n          this.image = this.sprites.idle.image;\n          this.framesMax = this.sprites.idle.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'run':\n        if (this.image !== this.sprites.run.image) {\n          this.image = this.sprites.run.image;\n          this.framesMax = this.sprites.run.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'jump':\n        if (this.image !== this.sprites.jump.image) {\n          this.image = this.sprites.jump.image;\n          this.framesMax = this.sprites.jump.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'fall':\n        if (this.image !== this.sprites.fall.image) {\n          this.image = this.sprites.fall.image;\n          this.framesMax = this.sprites.fall.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'attack1':\n        if (this.image !== this.sprites.attack1.image) {\n          this.image = this.sprites.attack1.image;\n          this.framesMax = this.sprites.attack1.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'takeHit':\n        if (this.image !== this.sprites.takeHit.image) {\n          this.image = this.sprites.takeHit.image;\n          this.framesMax = this.sprites.takeHit.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'death':\n        if (this.image !== this.sprites.death.image) {\n          this.image = this.sprites.death.image;\n          this.framesMax = this.sprites.death.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/character.js\n");

/***/ }),

/***/ "./src/scripts/sprite.js":
/*!*******************************!*\
  !*** ./src/scripts/sprite.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Sprite; }\n/* harmony export */ });\nclass Sprite {\n  constructor(canvas, context, _ref) {\n    let {\n      position,\n      imageSrc,\n      scale = 1,\n      framesMax = 1,\n      offset = {\n        x: 0,\n        y: 0\n      }\n    } = _ref;\n    this.canvas = canvas; // creating the frame\n    this.context = context; // this is where we attatch our programatic logic\n    this.position = position; // position of character. Contains x, y\n    this.image = new Image();\n    this.image.src = imageSrc;\n    this.scale = scale;\n    this.framesMax = framesMax;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.offset = offset;\n    this.width = 50; // width of my character box. Incrases widht towards right\n    this.height = 150; /// height of my character box. Increases height towards bottom\n  }\n\n  draw() {\n    this.context.drawImage(this.image, this.framesCurrent * (this.image.width / this.framesMax), 0, this.image.width / this.framesMax, this.image.height, this.position.x - this.offset.x, this.position.y - this.offset.y, this.image.width / this.framesMax * this.scale, this.image.height * this.scale);\n  }\n  update() {\n    this.draw();\n    this.framesElapsed++;\n    if (this.framesElapsed % this.framesHold === 0) {\n      if (this.framesCurrent < this.framesMax - 1) {\n        this.framesCurrent++;\n      } else {\n        this.framesCurrent = 0;\n      }\n    }\n  }\n}\n\n//starting player sprite//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9zcHJpdGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLE1BQU1BLE1BQU0sQ0FBQztFQUd4QkMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUFDLElBQUEsRUFBdUU7SUFBQSxJQUFyRTtNQUFDQyxRQUFRO01BQUVDLFFBQVE7TUFBRUMsS0FBSyxHQUFHLENBQUM7TUFBRUMsU0FBUyxHQUFHLENBQUM7TUFBRUMsTUFBTSxHQUFHO1FBQUNDLENBQUMsRUFBQyxDQUFDO1FBQUVDLENBQUMsRUFBQztNQUFDO0lBQUMsQ0FBQyxHQUFBUCxJQUFBO0lBQzVGLElBQUksQ0FBQ0YsTUFBTSxHQUFHQSxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTyxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDRSxRQUFRLEdBQUdBLFFBQVEsQ0FBQyxDQUFFO0lBQzNCLElBQUksQ0FBQ08sS0FBSyxHQUFHLElBQUlDLEtBQUssRUFBRTtJQUN4QixJQUFJLENBQUNELEtBQUssQ0FBQ0UsR0FBRyxHQUFHUixRQUFRO0lBQ3pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ08sYUFBYSxHQUFHLENBQUM7SUFDdEIsSUFBSSxDQUFDQyxhQUFhLEdBQUcsQ0FBQztJQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0lBQ25CLElBQUksQ0FBQ1IsTUFBTSxHQUFHQSxNQUFNO0lBRXBCLElBQUksQ0FBQ1MsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFFO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBRXZCOztFQUVBQyxJQUFJQSxDQUFBLEVBQUU7SUFDRixJQUFJLENBQUNqQixPQUFPLENBQUNrQixTQUFTLENBQ2xCLElBQUksQ0FBQ1QsS0FBSyxFQUNWLElBQUksQ0FBQ0csYUFBYSxJQUFHLElBQUksQ0FBQ0gsS0FBSyxDQUFDTSxLQUFLLEdBQUUsSUFBSSxDQUFDVixTQUFTLENBQUMsRUFDdEQsQ0FBQyxFQUNELElBQUksQ0FBQ0ksS0FBSyxDQUFDTSxLQUFLLEdBQUUsSUFBSSxDQUFDVixTQUFTLEVBQ2hDLElBQUksQ0FBQ0ksS0FBSyxDQUFDTyxNQUFNLEVBRWpCLElBQUksQ0FBQ2QsUUFBUSxDQUFDSyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxNQUFNLENBQUNDLENBQUMsRUFDL0IsSUFBSSxDQUFDTCxRQUFRLENBQUNNLENBQUMsR0FBRyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0UsQ0FBQyxFQUM5QixJQUFJLENBQUNDLEtBQUssQ0FBQ00sS0FBSyxHQUFHLElBQUksQ0FBQ1YsU0FBUyxHQUFJLElBQUksQ0FBQ0QsS0FBSyxFQUNoRCxJQUFJLENBQUNLLEtBQUssQ0FBQ08sTUFBTSxHQUFHLElBQUksQ0FBQ1osS0FBSyxDQUM3QjtFQUFBO0VBRVRlLE1BQU1BLENBQUEsRUFBRTtJQUNKLElBQUksQ0FBQ0YsSUFBSSxFQUFFO0lBQ1gsSUFBSSxDQUFDSixhQUFhLEVBQUU7SUFFcEIsSUFBRyxJQUFJLENBQUNBLGFBQWEsR0FBRyxJQUFJLENBQUNDLFVBQVUsS0FBSyxDQUFDLEVBQUM7TUFFMUMsSUFBRyxJQUFJLENBQUNGLGFBQWEsR0FBRyxJQUFJLENBQUNQLFNBQVMsR0FBRyxDQUFDLEVBQUM7UUFDdkMsSUFBSSxDQUFDTyxhQUFhLEVBQUU7TUFDeEIsQ0FBQyxNQUNHO1FBQ0EsSUFBSSxDQUFDQSxhQUFhLEdBQUcsQ0FBQztNQUMxQjtJQUNSO0VBQ0E7QUFHSjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHRfZ2FtZS8uL3NyYy9zY3JpcHRzL3Nwcml0ZS5qcz8wYWM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwcml0ZSB7XG4gICAgXG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGNvbnRleHQsIHtwb3NpdGlvbiwgaW1hZ2VTcmMsIHNjYWxlID0gMSwgZnJhbWVzTWF4ID0gMSwgb2Zmc2V0ID0ge3g6MCwgeTowfX0pIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7IC8vIGNyZWF0aW5nIHRoZSBmcmFtZVxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OyAvLyB0aGlzIGlzIHdoZXJlIHdlIGF0dGF0Y2ggb3VyIHByb2dyYW1hdGljIGxvZ2ljXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjsgIC8vIHBvc2l0aW9uIG9mIGNoYXJhY3Rlci4gQ29udGFpbnMgeCwgeVxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKClcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBpbWFnZVNyY1xuICAgICAgICB0aGlzLnNjYWxlID0gc2NhbGVcbiAgICAgICAgdGhpcy5mcmFtZXNNYXggPSBmcmFtZXNNYXhcbiAgICAgICAgdGhpcy5mcmFtZXNDdXJyZW50ID0gMFxuICAgICAgICB0aGlzLmZyYW1lc0VsYXBzZWQgPSAwXG4gICAgICAgIHRoaXMuZnJhbWVzSG9sZCA9IDVcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXRcbiAgICAgICAgXG4gICAgICAgIHRoaXMud2lkdGggPSA1MDsgIC8vIHdpZHRoIG9mIG15IGNoYXJhY3RlciBib3guIEluY3Jhc2VzIHdpZGh0IHRvd2FyZHMgcmlnaHRcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAxNTA7IC8vLyBoZWlnaHQgb2YgbXkgY2hhcmFjdGVyIGJveC4gSW5jcmVhc2VzIGhlaWdodCB0b3dhcmRzIGJvdHRvbVxuICAgICAgICAgXG4gICAgfVxuXG4gICAgZHJhdygpe1xuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzQ3VycmVudCogKHRoaXMuaW1hZ2Uud2lkdGgvIHRoaXMuZnJhbWVzTWF4KSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0aGlzLmltYWdlLndpZHRoLyB0aGlzLmZyYW1lc01heCxcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UuaGVpZ2h0LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnggLSB0aGlzLm9mZnNldC54LCBcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSAtIHRoaXMub2Zmc2V0LnksIFxuICAgICAgICAgICAgKHRoaXMuaW1hZ2Uud2lkdGggLyB0aGlzLmZyYW1lc01heCkgKiB0aGlzLnNjYWxlLCBcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UuaGVpZ2h0ICogdGhpcy5zY2FsZVxuICAgICAgICAgICAgKX1cblxuICAgIHVwZGF0ZSgpe1xuICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgdGhpcy5mcmFtZXNFbGFwc2VkKytcblxuICAgICAgICBpZih0aGlzLmZyYW1lc0VsYXBzZWQgJSB0aGlzLmZyYW1lc0hvbGQgPT09IDApe1xuICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMuZnJhbWVzQ3VycmVudCA8IHRoaXMuZnJhbWVzTWF4IC0gMSl7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZXNDdXJyZW50KytcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzQ3VycmVudCA9IDBcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgfVxuXG4gICAgXG59XG5cbi8vc3RhcnRpbmcgcGxheWVyIHNwcml0ZSJdLCJuYW1lcyI6WyJTcHJpdGUiLCJjb25zdHJ1Y3RvciIsImNhbnZhcyIsImNvbnRleHQiLCJfcmVmIiwicG9zaXRpb24iLCJpbWFnZVNyYyIsInNjYWxlIiwiZnJhbWVzTWF4Iiwib2Zmc2V0IiwieCIsInkiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiZnJhbWVzQ3VycmVudCIsImZyYW1lc0VsYXBzZWQiLCJmcmFtZXNIb2xkIiwid2lkdGgiLCJoZWlnaHQiLCJkcmF3IiwiZHJhd0ltYWdlIiwidXBkYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/sprite.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dhbWUvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;