/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/character */ \"./src/scripts/character.js\");\n/* harmony import */ var _scripts_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/sprite */ \"./src/scripts/sprite.js\");\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.querySelector('canvas');\n  const context = canvas.getContext('2d'); // c is context\n\n  canvas.width = 1024;\n  canvas.height = 576;\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  // creatae a new player\n\n  const player = new _scripts_character__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"player\", canvas, context, {\n    // creating the position and velocity as a key: value pair\n    position: {\n      x: 0,\n      y: 150 // so that we start at the bottom of the frame\n    },\n\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: 'green',\n    offset: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/Martial/Sprites/Idle.png',\n    framesMax: 8,\n    scale: 2.5,\n    offset: {\n      x: 215,\n      y: 157\n    },\n    sprites: {\n      idle: {\n        imageSrc: 'assets/Martial/Sprites/Idle.png',\n        framesMax: 8\n      },\n      run: {\n        imageSrc: 'assets/Martial/Sprites/Run.png',\n        framesMax: 8\n        //image: new Image()\n      },\n\n      jump: {\n        imageSrc: 'assets/Martial/Sprites/Jump.png',\n        framesMax: 2\n        //image: new Image()\n      },\n\n      fall: {\n        imageSrc: 'assets/Martial/Sprites/Fall.png',\n        framesMax: 2,\n        image: new Image()\n      },\n      attack1: {\n        imageSrc: 'assets/Martial/Sprites/Attack1.png',\n        framesMax: 6\n        //image: new Image()\n      },\n\n      takeHit: {\n        imageSrc: 'assets/Martial/Sprites/TakeHit.png',\n        framesMax: 4\n        //image: new Image()\n      },\n\n      death: {\n        imageSrc: 'assets/Martial/Sprites/Death.png',\n        framesMax: 6\n        //image: new Image()\n      }\n    },\n\n    attackBox: {\n      offset: {\n        x: 0,\n        y: 0\n      },\n      width: 200,\n      height: 50\n    }\n  });\n  console.log(player);\n  const enemy = new _scripts_character__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"enemy\", canvas, context, {\n    position: {\n      x: 700,\n      y: 150\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: 'blue',\n    offset: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/King/Sprites/Idle.png',\n    /////////////\n    framesMax: 8,\n    scale: 2.5,\n    offset: {\n      x: 215,\n      y: 110\n    },\n    sprites: {\n      idle: {\n        imageSrc: 'assets/King/Sprites/Idle.png',\n        framesMax: 8\n      },\n      run: {\n        imageSrc: 'assets/King/Sprites/Run.png',\n        framesMax: 8,\n        image: new Image()\n      },\n      jump: {\n        imageSrc: 'assets/King/Sprites/Jump.png',\n        framesMax: 2,\n        image: new Image()\n      },\n      fall: {\n        imageSrc: 'assets/King/Sprites/Fall.png',\n        framesMax: 2,\n        image: new Image()\n      },\n      attack1: {\n        imageSrc: 'assets/King/Sprites/Attack1.png',\n        framesMax: 6,\n        image: new Image()\n      },\n      takeHit: {\n        imageSrc: 'assets/King/Sprites/TakeHit.png',\n        framesMax: 4,\n        image: new Image()\n      },\n      death: {\n        imageSrc: 'assets/King/Sprites/Death.png',\n        framesMax: 6,\n        image: new Image()\n      }\n    },\n    attackBox: {\n      offset: {\n        x: -200,\n        y: 0\n      },\n      width: 200,\n      height: 50\n    }\n  });\n  const background = new _scripts_sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](canvas, context, {\n    position: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'assets/game_background_3/background.png'\n  });\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    w: {\n      pressed: false\n    }\n  };\n  function attackCollision(player1, player2) {\n    console.log(player1.attackRect.position.x + player1.attackRect.width >= player2.attackRect.position.x && player1.attackRect.position.x <= player2.attackRect.position.x + player2.attackRect.width && player1.attackRect.position.y + player1.attackRect.height >= player2.attackRect.position.y && player1.attackRect.position.y <= player2.attackRect.position.y + player2.attackRect.height);\n    return player1.attackRect.position.x + player1.attackRect.width >= player2.attackRect.position.x && player1.attackRect.position.x <= player2.attackRect.position.x + player2.attackRect.width && player1.attackRect.position.y + player1.attackRect.height >= player2.attackRect.position.y && player1.attackRect.position.y <= player2.attackRect.position.y + player2.attackRect.height;\n  }\n  function endgameFunc(_ref) {\n    let {\n      player,\n      enemy,\n      timerId\n    } = _ref;\n    clearTimeout(timerId);\n    document.querySelector('#textresult').style.display = 'flex';\n    if (player.health === enemy.health) {\n      document.querySelector('#textresult').innerHTML = 'Tie';\n      document.querySelector('#textresult').style.display = 'flex';\n    } else if (player.health > enemy.health) {\n      document.querySelector('#textresult').innerHTML = 'PLAYER 1 WINS';\n      document.querySelector('#textresult').style.display = 'flex';\n    } else if (enemy.health > player.health) {\n      document.querySelector('#textresult').innerHTML = 'PLAYER 2 WINS';\n      document.querySelector('#textresult').style.display = 'flex';\n    }\n  }\n  let timer = 45;\n  let timerId;\n  function countdown() {\n    if (timer > 0) {\n      timerId = setTimeout(countdown, 1000); // set interval allows multiple execution of code in set interval; setTimeout allows one execution\n      timer--;\n      document.querySelector(\"#timer\").innerHTML = timer;\n    }\n    if (timer === 0) {\n      document.querySelector('#textresult').style.display = 'flex';\n      endgameFunc({\n        player,\n        enemy\n      });\n    }\n  }\n  countdown();\n  function movement() {\n    context.fillStyle = \"black\"; // this is done so that when we call movement the color of the canvas doesn't turn red bcs of \n    // this.context.fillStyle = \"red\" in draw() method\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    window.requestAnimationFrame(movement); // this calls movement function on an endless loop\n    background.update();\n    player.update();\n    enemy.update();\n    if (enemy.health <= 0) {\n      enemy.velocity.x = 0;\n      console.log(\"enemy dead \");\n      enemy.switchSprites('death');\n      enemy.imageSrc = 'assets/King/Sprites/Death.png';\n      enemy.image = enemy.sprites.death.image;\n      enemy.framesMax = enemy.sprites.death.framesMax;\n      enemy.framesCurrent = 0;\n    } else {\n      if (enemy.velocity.x != 0) {\n        enemy.switchSprites('run');\n      } else {\n        enemy.switchSprites('idle');\n      }\n    }\n    player.velocity.x = 0;\n    if (player.health <= 0) {\n      console.log(\"player dead\");\n      player.switchSprites('death');\n      enemy.switchSprites('idle');\n    } else {\n      if (keys.a.pressed) {\n        player.velocity.x = -5;\n        player.switchSprites('run');\n      } else if (keys.d.pressed) {\n        player.velocity.x = 5;\n        player.switchSprites('run');\n      } else if (keys.w.pressed) {\n        // if(player.position.y > 0){\n        player.velocity.y = -10;\n        // }\n      } else {\n        player.switchSprites('idle');\n      }\n    }\n    if (player.velocity.y < 0) {\n      player.switchSprites('jump');\n    } else if (player.velocity.y > 0) {\n      player.switchSprites('fall');\n    }\n\n    //collision detection\n    if (attackCollision(player, enemy) && player.attacking) {\n      // enemy.switchSprites('takeHit')\n      // enemy.health -= 5;\n      enemy.takeHit();\n      console.log(\"enemyHP \", enemy.health);\n      player.attacking = false;\n      // document.querySelector('#enemyHealth').style.width = enemy.health + '%';\n      gsap.to('#enemyHealth', {\n        width: enemy.health + '%'\n      });\n    }\n    if (attackCollision(player, enemy) && enemy.attacking) {\n      // player.switchSprites('takeHit')\n      // player.health -= 5;\n      player.takeHit();\n      enemy.attacking = false;\n      console.log(\"playerHP \", player.health);\n      // player.health -= 1; \n      // document.querySelector('#playerHealth').style.width = player.health + '%';\n      gsap.to('#playerHealth', {\n        width: player.health + '%'\n      });\n    }\n\n    // end game logic\n    if (enemy.health <= 0 || player.health <= 0) {\n      endgameFunc({\n        player,\n        enemy,\n        timerId\n      });\n    }\n  }\n  movement();\n  setInterval(() => {\n    function randomIntFromInterval(min, max) {\n      // min and max included \n      return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    const rndInt = randomIntFromInterval(-1, 1);\n    console.log(rndInt);\n    if (enemy.health > 0) {\n      enemy.velocity.x = rndInt;\n      enemy.attack();\n    } else {\n      enemy.velocity.x = 0;\n    }\n  }, 1000);\n  window.addEventListener('keydown', event => {\n    //keydown is a key that allows for recognition of keyboard inputs on the console\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = true; // when i press d movement function picks it up bcs it is running \n        // every unit of time. \n        // player.image = player.sprites.run.image\n        break;\n      case 'a':\n        keys.a.pressed = true;\n        // player.image = player.sprites.run.image\n        break;\n      case 'w':\n        keys.w.pressed = true;\n        break;\n      case 'k':\n        player.attack();\n        break;\n    }\n    console.log(event.key);\n  });\n  window.addEventListener('keyup', event => {\n    //keydown is a key that allows for recognition of keyboard inputs on the console\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = false; // when i release d, movement functuin picks it up bcs it's running\n        // every unit of time\n        break;\n      case 'a':\n        keys.a.pressed = false;\n        break;\n      case 'w':\n        keys.w.pressed = false;\n        console.log(\"released\", event.key);\n    }\n  });\n});\n\n// randomize attakcs ??????\n// invert image   -----------DONE\n// negate attack range (make enemy attack negative)  ----- DONE\n// enemy sprite edit ----- DONE\n// build AI ???????//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/character.js":
/*!**********************************!*\
  !*** ./src/scripts/character.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Character; }\n/* harmony export */ });\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite */ \"./src/scripts/sprite.js\");\n\nconst gravity = 0.7;\nclass Character extends _sprite__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  // add canvas and context as arguments for constructor as they were created in a different class file//\n\n  constructor(name, canvas, context, _ref) {\n    let {\n      position,\n      velocity,\n      color,\n      // offset, \n      imageSrc,\n      scale = 1,\n      framesMax = 1,\n      offset = {\n        x: 0,\n        y: 0\n      },\n      sprites,\n      attackBox = {\n        offset: {},\n        width: undefined,\n        height: undefined\n      }\n    } = _ref;\n    super(canvas, context, {\n      position,\n      imageSrc,\n      scale,\n      framesMax,\n      offset\n    });\n    this.canvas = canvas; // creating the frame\n    this.context = context; // this is where we attatch our programatic logic\n    // this.position = position;  // position of character. Contains x, y\n    this.velocity = velocity; // velocity of character. Contains x, y. Only use is to be added to position(change position)\n    this.color = color;\n    this.width = 50; // width of my character box. Incrases widht towards right\n    this.height = 150; /// height of my character box. Increases height towards bottom\n\n    this.attackRect = {\n      position: {\n        x: this.position.x,\n        y: this.position.y\n      },\n      offset: attackBox.offset,\n      width: attackBox.width,\n      height: attackBox.height\n    };\n    this.attacking;\n    this.health = 100;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.sprites = sprites;\n    this.dead = false;\n    this.name = name;\n    for (const sprite in this.sprites) {\n      sprites[sprite].image = new Image();\n      sprites[sprite].image.src = sprites[sprite].imageSrc;\n    }\n  }\n  update() {\n    // this is not the update for the entire fram. this just updates the specific character.\n    // update gets called every unit of timein movement();\n    this.draw();\n    if (!this.dead) {\n      this.framesElapsed++;\n      if (this.framesElapsed % this.framesHold === 0) {\n        if (this.framesCurrent < this.framesMax - 1) {\n          this.framesCurrent++;\n        } else {\n          this.framesCurrent = 0;\n        }\n      }\n    }\n    this.attackRect.position.x = this.position.x + this.attackRect.offset.x;\n    this.attackRect.position.y = this.position.y;\n    // this.context.fillRect(this.attackRect.position.x, this.attackRect.position.y,\n    //  this.attackRect.width, this.attackRect.height);  ///////////////////////////////////////////\n\n    if (this.position.x < 0) {\n      this.position.x = 0;\n    } else if (this.position.x > this.canvas.width) {\n      this.position.x = this.canvas.width;\n    } else {\n      this.position.x += this.velocity.x;\n    }\n    //console.log(\"PRINTING POS X\", this.position.x)\n\n    // if character position becomes < 0, this means it's in the ceiling. stop code from reducing the value \n    //of y anymore\n    if (this.position.y < 0) {\n      this.velocity.y = gravity; // gravity is what brings it back down from the ceiling\n    }\n\n    this.position.y += this.velocity.y;\n    if (this.position.y + this.height + this.velocity.y >= this.canvas.height) {\n      this.velocity.y = 0; //stopping movement when the user chareacter is >= canvas height(boundary wall)\n    } else {\n      this.velocity.y += gravity; // adding gravity prevents the characters from leaving the screen\n    }\n  }\n\n  attack() {\n    this.switchSprites('attack1');\n    this.attacking = true;\n    setTimeout(() => {\n      this.attacking = false;\n    }, 1000);\n  }\n  takeHit() {\n    this.switchSprites('takeHit');\n    this.health -= 8;\n    if (this.health <= 0) {\n      this.switchSprites('death');\n    } else {\n      this.switchSprites('takeHit');\n    }\n  }\n  switchSprites(sprite) {\n    // if dead we won't do anymore sprites\n\n    // if(this.name == \"player\"){\n    //     console.log(\"players framCurrent \", this.framesCurrent)\n    // }\n    // if(this.name == \"enemy\"){\n    //     console.log(\"enemy framCurrent \", this.framesCurrent)\n    // }\n\n    if (this.image === this.sprites.death.image) {\n      if (this.framesCurrent === this.sprites.death.framesMax - 1) this.dead = true;\n      this.image = this.sprites.death.image;\n      console.log(\"DEAD\");\n      return;\n    }\n\n    // overriding all other animations with attack animation\n    if (this.image === this.sprites.attack1.image && this.framesCurrent < this.sprites.attack1.framesMax - 1) {\n      return;\n    }\n\n    // overrride when fighter gets hit\n\n    if (this.image === this.sprites.takeHit.image && this.framesCurrent < this.sprites.takeHit.framesMax - 1) {\n      return;\n    }\n    switch (sprite) {\n      case 'idle':\n        if (this.image !== this.sprites.idle.image) {\n          if (this.name == \"player\") {\n            console.log(\" set to idle\");\n          }\n          this.image = this.sprites.idle.image;\n          this.framesMax = this.sprites.idle.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'run':\n        if (this.image !== this.sprites.run.image) {\n          this.image = this.sprites.run.image;\n          this.framesMax = this.sprites.run.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'jump':\n        if (this.image !== this.sprites.jump.image) {\n          this.image = this.sprites.jump.image;\n          this.framesMax = this.sprites.jump.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'fall':\n        if (this.image !== this.sprites.fall.image) {\n          this.image = this.sprites.fall.image;\n          this.framesMax = this.sprites.fall.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'attack1':\n        if (this.image !== this.sprites.attack1.image) {\n          this.image = this.sprites.attack1.image;\n          this.framesMax = this.sprites.attack1.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'takeHit':\n        if (this.image !== this.sprites.takeHit.image) {\n          this.image = this.sprites.takeHit.image;\n          this.framesMax = this.sprites.takeHit.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n      case 'death':\n        if (this.image !== this.sprites.death.image) {\n          this.image = this.sprites.death.image;\n          this.framesMax = this.sprites.death.framesMax;\n          this.framesCurrent = 0;\n        }\n        break;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/character.js\n");

/***/ }),

/***/ "./src/scripts/sprite.js":
/*!*******************************!*\
  !*** ./src/scripts/sprite.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Sprite; }\n/* harmony export */ });\nclass Sprite {\n  constructor(canvas, context, _ref) {\n    let {\n      position,\n      imageSrc,\n      scale = 1,\n      framesMax = 1,\n      offset = {\n        x: 0,\n        y: 0\n      }\n    } = _ref;\n    this.canvas = canvas; // creating the frame\n    this.context = context; // this is where we attatch our programatic logic\n    this.position = position; // position of character. Contains x, y\n    this.image = new Image();\n    this.image.src = imageSrc;\n    this.scale = scale;\n    this.framesMax = framesMax;\n    this.framesCurrent = 0;\n    this.framesElapsed = 0;\n    this.framesHold = 5;\n    this.offset = offset;\n    this.width = 50; // width of my character box. Incrases widht towards right\n    this.height = 150; /// height of my character box. Increases height towards bottom\n  }\n\n  draw() {\n    this.context.drawImage(this.image, this.framesCurrent * (this.image.width / this.framesMax), 0, this.image.width / this.framesMax, this.image.height, this.position.x - this.offset.x, this.position.y - this.offset.y, this.image.width / this.framesMax * this.scale, this.image.height * this.scale);\n  }\n  update() {\n    this.draw();\n    this.framesElapsed++;\n    if (this.framesElapsed % this.framesHold === 0) {\n      if (this.framesCurrent < this.framesMax - 1) {\n        this.framesCurrent++;\n      } else {\n        this.framesCurrent = 0;\n      }\n    }\n  }\n}\n\n//starting player sprite//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9zcHJpdGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLE1BQU1BLE1BQU0sQ0FBQztFQUd4QkMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUFDLElBQUEsRUFBdUU7SUFBQSxJQUFyRTtNQUFDQyxRQUFRO01BQUVDLFFBQVE7TUFBRUMsS0FBSyxHQUFHLENBQUM7TUFBRUMsU0FBUyxHQUFHLENBQUM7TUFBRUMsTUFBTSxHQUFHO1FBQUNDLENBQUMsRUFBQyxDQUFDO1FBQUVDLENBQUMsRUFBQztNQUFDO0lBQUMsQ0FBQyxHQUFBUCxJQUFBO0lBQzVGLElBQUksQ0FBQ0YsTUFBTSxHQUFHQSxNQUFNLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTyxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDRSxRQUFRLEdBQUdBLFFBQVEsQ0FBQyxDQUFFO0lBQzNCLElBQUksQ0FBQ08sS0FBSyxHQUFHLElBQUlDLEtBQUssRUFBRTtJQUN4QixJQUFJLENBQUNELEtBQUssQ0FBQ0UsR0FBRyxHQUFHUixRQUFRO0lBQ3pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ08sYUFBYSxHQUFHLENBQUM7SUFDdEIsSUFBSSxDQUFDQyxhQUFhLEdBQUcsQ0FBQztJQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0lBQ25CLElBQUksQ0FBQ1IsTUFBTSxHQUFHQSxNQUFNO0lBRXBCLElBQUksQ0FBQ1MsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFFO0lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBRXZCOztFQUVBQyxJQUFJQSxDQUFBLEVBQUU7SUFDRixJQUFJLENBQUNqQixPQUFPLENBQUNrQixTQUFTLENBQ2xCLElBQUksQ0FBQ1QsS0FBSyxFQUNWLElBQUksQ0FBQ0csYUFBYSxJQUFHLElBQUksQ0FBQ0gsS0FBSyxDQUFDTSxLQUFLLEdBQUUsSUFBSSxDQUFDVixTQUFTLENBQUMsRUFDdEQsQ0FBQyxFQUNELElBQUksQ0FBQ0ksS0FBSyxDQUFDTSxLQUFLLEdBQUUsSUFBSSxDQUFDVixTQUFTLEVBQ2hDLElBQUksQ0FBQ0ksS0FBSyxDQUFDTyxNQUFNLEVBRWpCLElBQUksQ0FBQ2QsUUFBUSxDQUFDSyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxNQUFNLENBQUNDLENBQUMsRUFDL0IsSUFBSSxDQUFDTCxRQUFRLENBQUNNLENBQUMsR0FBRyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0UsQ0FBQyxFQUM5QixJQUFJLENBQUNDLEtBQUssQ0FBQ00sS0FBSyxHQUFHLElBQUksQ0FBQ1YsU0FBUyxHQUFJLElBQUksQ0FBQ0QsS0FBSyxFQUNoRCxJQUFJLENBQUNLLEtBQUssQ0FBQ08sTUFBTSxHQUFHLElBQUksQ0FBQ1osS0FBSyxDQUM3QjtFQUFBO0VBRVRlLE1BQU1BLENBQUEsRUFBRTtJQUNKLElBQUksQ0FBQ0YsSUFBSSxFQUFFO0lBQ1gsSUFBSSxDQUFDSixhQUFhLEVBQUU7SUFFcEIsSUFBRyxJQUFJLENBQUNBLGFBQWEsR0FBRyxJQUFJLENBQUNDLFVBQVUsS0FBSyxDQUFDLEVBQUM7TUFFMUMsSUFBRyxJQUFJLENBQUNGLGFBQWEsR0FBRyxJQUFJLENBQUNQLFNBQVMsR0FBRyxDQUFDLEVBQUM7UUFDdkMsSUFBSSxDQUFDTyxhQUFhLEVBQUU7TUFDeEIsQ0FBQyxNQUNHO1FBQ0EsSUFBSSxDQUFDQSxhQUFhLEdBQUcsQ0FBQztNQUMxQjtJQUNSO0VBQ0E7QUFHSjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHRfZ2FtZS8uL3NyYy9zY3JpcHRzL3Nwcml0ZS5qcz8wYWM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwcml0ZSB7XG4gICAgXG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGNvbnRleHQsIHtwb3NpdGlvbiwgaW1hZ2VTcmMsIHNjYWxlID0gMSwgZnJhbWVzTWF4ID0gMSwgb2Zmc2V0ID0ge3g6MCwgeTowfX0pIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7IC8vIGNyZWF0aW5nIHRoZSBmcmFtZVxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OyAvLyB0aGlzIGlzIHdoZXJlIHdlIGF0dGF0Y2ggb3VyIHByb2dyYW1hdGljIGxvZ2ljXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjsgIC8vIHBvc2l0aW9uIG9mIGNoYXJhY3Rlci4gQ29udGFpbnMgeCwgeVxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKClcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBpbWFnZVNyY1xuICAgICAgICB0aGlzLnNjYWxlID0gc2NhbGVcbiAgICAgICAgdGhpcy5mcmFtZXNNYXggPSBmcmFtZXNNYXhcbiAgICAgICAgdGhpcy5mcmFtZXNDdXJyZW50ID0gMFxuICAgICAgICB0aGlzLmZyYW1lc0VsYXBzZWQgPSAwXG4gICAgICAgIHRoaXMuZnJhbWVzSG9sZCA9IDVcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXRcbiAgICAgICAgXG4gICAgICAgIHRoaXMud2lkdGggPSA1MDsgIC8vIHdpZHRoIG9mIG15IGNoYXJhY3RlciBib3guIEluY3Jhc2VzIHdpZGh0IHRvd2FyZHMgcmlnaHRcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAxNTA7IC8vLyBoZWlnaHQgb2YgbXkgY2hhcmFjdGVyIGJveC4gSW5jcmVhc2VzIGhlaWdodCB0b3dhcmRzIGJvdHRvbVxuICAgICAgICAgXG4gICAgfVxuXG4gICAgZHJhdygpe1xuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzQ3VycmVudCogKHRoaXMuaW1hZ2Uud2lkdGgvIHRoaXMuZnJhbWVzTWF4KSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0aGlzLmltYWdlLndpZHRoLyB0aGlzLmZyYW1lc01heCxcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UuaGVpZ2h0LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnggLSB0aGlzLm9mZnNldC54LCBcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSAtIHRoaXMub2Zmc2V0LnksIFxuICAgICAgICAgICAgKHRoaXMuaW1hZ2Uud2lkdGggLyB0aGlzLmZyYW1lc01heCkgKiB0aGlzLnNjYWxlLCBcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UuaGVpZ2h0ICogdGhpcy5zY2FsZVxuICAgICAgICAgICAgKX1cblxuICAgIHVwZGF0ZSgpe1xuICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgdGhpcy5mcmFtZXNFbGFwc2VkKytcblxuICAgICAgICBpZih0aGlzLmZyYW1lc0VsYXBzZWQgJSB0aGlzLmZyYW1lc0hvbGQgPT09IDApe1xuICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMuZnJhbWVzQ3VycmVudCA8IHRoaXMuZnJhbWVzTWF4IC0gMSl7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZXNDdXJyZW50KytcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzQ3VycmVudCA9IDBcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgfVxuXG4gICAgXG59XG5cbi8vc3RhcnRpbmcgcGxheWVyIHNwcml0ZSJdLCJuYW1lcyI6WyJTcHJpdGUiLCJjb25zdHJ1Y3RvciIsImNhbnZhcyIsImNvbnRleHQiLCJfcmVmIiwicG9zaXRpb24iLCJpbWFnZVNyYyIsInNjYWxlIiwiZnJhbWVzTWF4Iiwib2Zmc2V0IiwieCIsInkiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiZnJhbWVzQ3VycmVudCIsImZyYW1lc0VsYXBzZWQiLCJmcmFtZXNIb2xkIiwid2lkdGgiLCJoZWlnaHQiLCJkcmF3IiwiZHJhd0ltYWdlIiwidXBkYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/sprite.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0X2dhbWUvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;